<?xml version="1.0" encoding="UTF-8"?>

<beans 	xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://www.springframework.org/schema/beans
													  http://www.springframework.org/schema/beans/spring-beans.xsd">												 
												 
   	<!-- code:: User user06 = new User(60,"6060","60유저") -->
   	<!-- public User(int age, String password, String userId 
   		 Constructor Injection의 경우 인자 전달이 모호해질 수 있다. :: 출력값확인-->
   	<bean id="user06" class="spring.service.domain.User">
   	 <constructor-arg value="60" index="0"/>
   	 <constructor-arg value="60유저" index="2"/>
   	 <constructor-arg value="6060" index="1"/>
   	</bean>

	<!-- code:: User user07 = new User(70,password,"70유저") -->
	<bean id="user07" class="spring.service.domain.User">
	<!-- public User(int age, String password, String userId 
   		 Constructor Injection의 경우 인자 전달이 모호해질 수 있다. :: 출력값확인
   		 모호한 생성자 인자를 다루는 2가지 방법 :: index사용 / Data type사용-->
   	 <constructor-arg value="70유저" type="java.lang.String"/>
   	 <constructor-arg value="70" type="int"/>
   	 <constructor-arg ref="password" index="1"/>	 
	</bean>
	
	<!-- String에서 제공하는 PropertyPlacehoderConfigurer API이용
		 properties Meta-data를 접근할 수 있는 기능 제공 :: Spring API 확인 -->
		 <bean id="propertyConfigurer"
		 		class="org.springframework.bean.factory.config.PropertyPlaceholderConfigurer" >
		 	<property name="location" value="config/userservice02.properties"/>
		 </bean>
		
	<!-- Properties파일로 분리한 리소스는 Spring에서 제공되는 
		 - PropertyPlaceholderConfingurer 객체를 이용하여 사용가능
		 - 대치변수의 형태 ${}로 접근가능하다. :: JSP EL와 유사 -->
	<bean id="user08" class="spring.service.domain.User">
	 <property name="age" value="${user.age}"/>
	 <property name="userId" value="${user.userId}"/>
	 <property name="password" value="${user.password}"/>
	</bean>
	
</beans>